RefactoringTool: Skipping implicit fixer: buffer
RefactoringTool: Skipping implicit fixer: idioms
RefactoringTool: Skipping implicit fixer: set_literal
RefactoringTool: Skipping implicit fixer: ws_comma
RefactoringTool: Refactored src/dogapi/common.py
--- src/dogapi/common.py	(original)
+++ src/dogapi/common.py	(refactored)
@@ -2,7 +2,7 @@
 
 import logging
 import socket
-import urllib2
+import urllib.request, urllib.error, urllib.parse
 
 from dogapi.exceptions import *
 from dogapi.constants import *
@@ -18,7 +18,7 @@
         socket.setdefaulttimeout(0.25)
 
         try:
-            return urllib2.urlopen(urllib2.Request('http://169.254.169.254/latest/meta-data/instance-id')).read()
+            return urllib.request.urlopen(urllib.request.Request('http://169.254.169.254/latest/meta-data/instance-id')).read()
         finally:
             # Reset the previous default timeout
             socket.setdefaulttimeout(old_timeout)
RefactoringTool: Refactored src/dogapi/http/base.py
--- src/dogapi/http/base.py	(original)
+++ src/dogapi/http/base.py	(refactored)
@@ -2,7 +2,7 @@
     'BaseDatadog',
 ]
 
-import httplib
+import http.client
 import os
 import logging
 import re
@@ -10,7 +10,7 @@
 import time
 from contextlib import contextmanager
 from pprint import pformat
-from urllib import urlencode
+from urllib.parse import urlencode
 
 
 try:
@@ -32,7 +32,7 @@
 class BaseDatadog(object):
     def __init__(self, api_key=None, application_key=None, api_version='v1', api_host=None, timeout=2, max_timeouts=3, backoff_period=300, swallow=True, use_ec2_instance_id=False, json_responses=False):
 
-        self.http_conn_cls = httplib.HTTPSConnection
+        self.http_conn_cls = http.client.HTTPSConnection
         self._api_host = None
         self.api_host = api_host or os.environ.get('DATADOG_HOST', 'https://app.datadoghq.com')
 
@@ -82,7 +82,7 @@
                     # Keep a count of the timeouts to know when to back off
                     self._timeout_counter += 1
                     raise HttpTimeout('%s %s timed out after %d seconds.' % (method, url, self.timeout))
-                except socket.error, e:
+                except socket.error as e:
                     # Translate the low level socket error into a more
                     # descriptive one
                     raise ClientError("Could not request %s %s%s: %s" % (method, self.api_host, url, e))
@@ -108,7 +108,7 @@
                 return response_obj
             finally:
                 conn.close()
-        except ClientError, e:
+        except ClientError as e:
             if self.swallow:
                 log.error(str(e))
             else:
@@ -138,12 +138,12 @@
 
         def fset(self, value):
             match = re.match('^(https?)://(.*)', value)
-            http_conn_cls = httplib.HTTPSConnection
+            http_conn_cls = http.client.HTTPSConnection
 
             if match:
                 host = match.group(2)
                 if match.group(1) == 'http':
-                    http_conn_cls = httplib.HTTPConnection
+                    http_conn_cls = http.client.HTTPConnection
             else:
                 host = value
 
RefactoringTool: Refactored src/dogapi/http/dashes.py
--- src/dogapi/http/dashes.py	(original)
+++ src/dogapi/http/dashes.py	(refactored)
@@ -23,7 +23,7 @@
         See the `dashboard API documentation <http://api.datadoghq.com/dashboard>`_ for the
         dashboard data format.
         """
-        if isinstance(graphs, (str, unicode)):
+        if isinstance(graphs, str):
             graphs = json.loads(graphs)
         body = {
             'title': title,
@@ -44,7 +44,7 @@
         See the `dashboard API documentation <http://api.datadoghq.com/dashboard>`_ for the
         dashboard data format.
         """
-        if isinstance(graphs, (str, unicode)):
+        if isinstance(graphs, str):
             graphs = json.loads(graphs)
         body = {
             'title': title,
RefactoringTool: No changes to src/dogapi/http/metrics.py
RefactoringTool: No changes to src/dogapi/stats/dog_stats_api.py
RefactoringTool: Refactored src/dogapi/stats/metrics.py
--- src/dogapi/stats/metrics.py	(original)
+++ src/dogapi/stats/metrics.py	(refactored)
@@ -119,7 +119,7 @@
         past_intervals = [i for i in self._metrics if i < interval]
         metrics = []
         for i in past_intervals:
-            for m in self._metrics.pop(i).values():
+            for m in list(self._metrics.pop(i).values()):
                 metrics += m.flush(i)
         return metrics
 
RefactoringTool: No changes to src/dogapi/stats/reporters.py
RefactoringTool: Refactored src/dogshell/comment.py
--- src/dogshell/comment.py	(original)
+++ src/dogshell/comment.py	(refactored)
@@ -49,19 +49,19 @@
             message = res['comment']['message']
             lines = message.split('\n')
             message = '\n'.join(['    ' + line for line in lines])
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\n' + message
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\n' + message)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\t\t' + res['comment']['message'].__repr__()
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\t\t' + res['comment']['message'].__repr__())
 
     def _update(self, args):
         handle = args.handle
@@ -77,19 +77,19 @@
             message = res['comment']['message']
             lines = message.split('\n')
             message = '\n'.join(['    ' + line for line in lines])
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\n' + message
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\n' + message)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\t\t' + res['comment']['message'].__repr__()
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\t\t' + res['comment']['message'].__repr__())
 
     def _reply(self, args):
         self.dog.timeout = args.timeout
@@ -106,19 +106,19 @@
             message = res['comment']['message']
             lines = message.split('\n')
             message = '\n'.join(['    ' + line for line in lines])
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\n' + message
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\n' + message)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
-            print 'id\t\t' + str(res['comment']['id'])
-            print 'url\t\t' + res['comment']['url']
-            print 'resource\t' + res['comment']['resource']
-            print 'handle\t\t' + res['comment']['handle']
-            print 'message\t\t' + res['comment']['message'].__repr__()
+            print('id\t\t' + str(res['comment']['id']))
+            print('url\t\t' + res['comment']['url'])
+            print('resource\t' + res['comment']['resource'])
+            print('handle\t\t' + res['comment']['handle'])
+            print('message\t\t' + res['comment']['message'].__repr__())
 
     def _show(self, args):
         self.dog.timeout = args.timeout
@@ -131,19 +131,19 @@
             message = res['event']['text']
             lines = message.split('\n')
             message = '\n'.join(['    ' + line for line in lines])
-            print 'id\t\t' + str(res['event']['id'])
-            print 'url\t\t' + res['event']['url']
-            print 'resource\t' + res['event']['resource']
+            print('id\t\t' + str(res['event']['id']))
+            print('url\t\t' + res['event']['url'])
+            print('resource\t' + res['event']['resource'])
             #print 'handle\t\t' + res['event']['handle']
-            print 'message\n' + message
+            print('message\n' + message)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
-            print 'id\t\t' + str(res['event']['id'])
-            print 'url\t\t' + res['event']['url']
-            print 'resource\t' + res['event']['resource']
+            print('id\t\t' + str(res['event']['id']))
+            print('url\t\t' + res['event']['url'])
+            print('resource\t' + res['event']['resource'])
             #print 'handle\t\t' + res['event']['handle']
-            print 'message\t\t' + res['event']['text'].__repr__()
+            print('message\t\t' + res['event']['text'].__repr__())
 
     def _delete(self, args):
         self.dog.timeout = args.timeout
@@ -153,8 +153,8 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print 'event %s deleted' % id
+            print('event %s deleted' % id)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             pass
RefactoringTool: Refactored src/dogshell/common.py
--- src/dogshell/common.py	(original)
+++ src/dogshell/common.py	(refactored)
@@ -1,4 +1,4 @@
-import ConfigParser
+import configparser
 import os
 import sys
 from UserDict import IterableUserDict
@@ -9,14 +9,14 @@
 def report_errors(res):
     if 'errors' in res:
         for e in res['errors']:
-            print >> sys.stderr, 'ERROR: ' + e
+            print('ERROR: ' + e, file=sys.stderr)
         sys.exit(1)
     return False
 
 def report_warnings(res):
     if 'warnings' in res:
         for e in res['warnings']:
-            print >> sys.stderr, 'WARNING: ' + e
+            print('WARNING: ' + e, file=sys.stderr)
         return True
     return False
 
@@ -36,7 +36,7 @@
 class DogshellConfig(IterableUserDict):
 
     def load(self, config_file):
-        config = ConfigParser.ConfigParser()
+        config = configparser.ConfigParser()
         
         if os.access(config_file, os.F_OK):
             config.read(config_file)
@@ -44,11 +44,11 @@
                 report_errors({'errors': ['%s has no [Connection] section' % config_file]})
         else:
             try:
-                response = raw_input('%s does not exist. Would you like to create it? [Y/n] ' % config_file)
+                response = input('%s does not exist. Would you like to create it? [Y/n] ' % config_file)
                 if response.strip().lower() in ['', 'y', 'yes']:
                     # Read the api and app keys from stdin
-                    apikey = raw_input('What is your api key? (Get it here: https://app.datadoghq.com/account/settings) ')
-                    appkey = raw_input('What is your application key? (Generate one here: https://app.datadoghq.com/account/settings) ')
+                    apikey = input('What is your api key? (Get it here: https://app.datadoghq.com/account/settings) ')
+                    appkey = input('What is your application key? (Generate one here: https://app.datadoghq.com/account/settings) ')
                 
                     # Write the config file
                     config.add_section('Connection')
@@ -58,15 +58,15 @@
                     f = open(config_file, 'w')
                     config.write(f)
                     f.close()
-                    print 'Wrote %s' % config_file
+                    print('Wrote %s' % config_file)
                         
                 else:
                     # Abort
-                    print >> sys.stderr, 'Exiting'
+                    print('Exiting', file=sys.stderr)
                     sys.exit(1)
             except KeyboardInterrupt:
                 # Abort
-                print >> sys.stderr, '\nExiting'
+                print('\nExiting', file=sys.stderr)
                 sys.exit(1)
             
         
RefactoringTool: Refactored src/dogshell/dashboard.py
--- src/dogshell/dashboard.py	(original)
+++ src/dogshell/dashboard.py	(refactored)
@@ -75,8 +75,7 @@
         
         def _title_to_filename(title):
             # Get a lowercased version with most punctuation stripped out...
-            no_punct = filter(lambda c: c.isalnum() or c in [" ", "_", "-"],
-                              title.lower())
+            no_punct = [c for c in title.lower() if c.isalnum() or c in [" ", "_", "-"]]
             # Now replace all -'s, _'s and spaces with "_", and strip trailing _
             return no_punct.replace(" ", "_").replace("-", "_").strip("_")
 
@@ -86,7 +85,7 @@
         report_errors(res)
         
         if not os.path.exists(args.pull_dir):
-            os.mkdir(args.pull_dir, 0755)
+            os.mkdir(args.pull_dir, 0o755)
         
         used_filenames = set()
         for dash_summary in res['dashes']:
@@ -101,8 +100,8 @@
                                      format,
                                      args.string_ids)
         if format == 'pretty':
-            print("\n### Total: {0} dashboards to {1} ###"
-                  .format(len(used_filenames), os.path.realpath(args.pull_dir)))
+            print(("\n### Total: {0} dashboards to {1} ###"
+                  .format(len(used_filenames), os.path.realpath(args.pull_dir))))
 
     def _new_file(self, args):
         self.dog.timeout = args.timeout
@@ -115,9 +114,9 @@
         self._write_dash_to_file(res['dash']['id'], args.filename, args.timeout, format, args.string_ids)
 
         if format == 'pretty':
-            print self._pretty_json(res)
-        else:
-            print simplejson.dumps(res)
+            print(self._pretty_json(res))
+        else:
+            print(simplejson.dumps(res))
 
     def _write_dash_to_file(self, dash_id, filename, timeout, format='raw', string_ids=False):
         with open(filename, "wb") as f:
@@ -137,9 +136,9 @@
             simplejson.dump(dash_obj, f, indent=2)
 
             if format == 'pretty':
-                print "Downloaded dashboard {0} to file {1}".format(dash_id, filename)
+                print("Downloaded dashboard {0} to file {1}".format(dash_id, filename))
             else:
-                print "{0} {1}".format(dash_id, filename)
+                print("{0} {1}".format(dash_id, filename))
 
     def _push(self, args):
         self.dog.timeout = args.timeout
@@ -162,13 +161,13 @@
             res = self.dog.update_dashboard(dash_obj["id"], dash_obj["title"], dash_obj["description"], dash_obj["graphs"])
 
             if 'errors' in res:
-                print >> sys.stderr, 'Upload of dashboard {0} from file {1} failed.'.format(dash_obj["id"], f.name)
+                print('Upload of dashboard {0} from file {1} failed.'.format(dash_obj["id"], f.name), file=sys.stderr)
 
             report_warnings(res)
             report_errors(res)
 
             if args.format == 'pretty':
-                print "Uploaded file {0} (dashboard {1})".format(f.name, dash_obj["id"])
+                print("Uploaded file {0} (dashboard {1})".format(f.name, dash_obj["id"]))
         
     def _post(self, args):
         self.dog.timeout = args.timeout
@@ -183,9 +182,9 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print self._pretty_json(res)
-        else:
-            print simplejson.dumps(res)
+            print(self._pretty_json(res))
+        else:
+            print(simplejson.dumps(res))
 
     def _update(self, args):
         self.dog.timeout = args.timeout
@@ -200,9 +199,9 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print self._pretty_json(res)
-        else:
-            print simplejson.dumps(res)
+            print(self._pretty_json(res))
+        else:
+            print(simplejson.dumps(res))
 
     def _show(self, args):
         self.dog.timeout = args.timeout
@@ -215,9 +214,9 @@
             res["dash"]["id"] = str(res["dash"]["id"])
 
         if format == 'pretty':
-            print self._pretty_json(res)
-        else:
-            print simplejson.dumps(res)
+            print(self._pretty_json(res))
+        else:
+            print(simplejson.dumps(res))
 
     def _show_all(self, args):
         self.dog.timeout = args.timeout
@@ -231,15 +230,15 @@
                 d["id"] = str(d["id"])
 
         if format == 'pretty':
-            print self._pretty_json(res)
+            print(self._pretty_json(res))
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             for d in res["dashes"]:
-                print "\t".join([(d["id"]), 
+                print("\t".join([(d["id"]), 
                                  (d["resource"]),
                                  (d["title"]),
-                                 self._escape(d["description"])])
+                                 self._escape(d["description"])]))
 
     def _delete(self, args):
         self.dog.timeout = args.timeout
@@ -248,9 +247,9 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print self._pretty_json(res)
-        else:
-            print simplejson.dumps(res)
+            print(self._pretty_json(res))
+        else:
+            print(simplejson.dumps(res))
 
     def _web_view(self, args):
         dash_id = simplejson.load(args.file)['id']
RefactoringTool: Refactored src/dogshell/event.py
--- src/dogshell/event.py	(original)
+++ src/dogshell/event.py	(refactored)
@@ -12,8 +12,8 @@
     date = event['date_happened']
     dt = datetime.datetime.fromtimestamp(date)
     link = event['url']
-    print (title + ' (' + handle + ')').strip()
-    print dt.isoformat(' ') + ' | '+ link
+    print((title + ' (' + handle + ')').strip())
+    print(dt.isoformat(' ') + ' | '+ link)
 
 def print_event(event):
     prettyprint_event(event)
@@ -101,7 +101,7 @@
         if format == 'pretty':
             prettyprint_event(res['event'])
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             print_event(res['event'])
 
@@ -114,7 +114,7 @@
         if format == 'pretty':
             prettyprint_event_details(res['event'])
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             print_event_details(res['event'])
 
@@ -137,10 +137,10 @@
         if format == 'pretty':
             for event in res['events']:
                 prettyprint_event(event)
-                print
+                print()
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             for event in res['events']:
                 print_event(event)
-                print
+                print()
RefactoringTool: Refactored src/dogshell/search.py
--- src/dogshell/search.py	(original)
+++ src/dogshell/search.py	(refactored)
@@ -18,16 +18,16 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            for facet, results in res['results'].items():
+            for facet, results in list(res['results'].items()):
                 for idx, result in enumerate(results):
                     if idx == 0:
-                        print '\n'
-                        print "%s\t%s" % (facet, result)
+                        print('\n')
+                        print("%s\t%s" % (facet, result))
                     else:
-                        print "%s\t%s" % (' '*len(facet), result)
+                        print("%s\t%s" % (' '*len(facet), result))
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
-            for facet, results in res['results'].items():
+            for facet, results in list(res['results'].items()):
                 for result in results:
-                    print "%s\t%s" % (facet, result)
+                    print("%s\t%s" % (facet, result))
RefactoringTool: Refactored src/dogshell/tag.py
--- src/dogshell/tag.py	(original)
+++ src/dogshell/tag.py	(refactored)
@@ -35,14 +35,14 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print "Tags for '%s':" % res['host']
+            print("Tags for '%s':" % res['host'])
             for c in res['tags']:
-                print '  ' + c
+                print('  ' + c)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             for c in res['tags']:
-                print c
+                print(c)
 
     def _replace(self, args):
         self.dog.timeout = args.timeout
@@ -51,14 +51,14 @@
         report_warnings(res)
         report_errors(res)
         if format == 'pretty':
-            print "Tags for '%s':" % res['host']
+            print("Tags for '%s':" % res['host'])
             for c in res['tags']:
-                print '  ' + c
+                print('  ' + c)
         elif format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
         else:
             for c in res['tags']:
-                print c
+                print(c)
 
     def _show(self, args):
         self.dog.timeout = args.timeout
@@ -71,26 +71,26 @@
         report_errors(res)
         if args.host == 'all':
             if format == 'pretty':
-                for tag, hosts in res['tags'].items():
+                for tag, hosts in list(res['tags'].items()):
                     for host in hosts:
-                        print tag
-                        print '  ' + host
-                    print
+                        print(tag)
+                        print('  ' + host)
+                    print()
             elif format == 'raw':
-                print simplejson.dumps(res)
+                print(simplejson.dumps(res))
             else:
-                for tag, hosts in res['tags'].items():
+                for tag, hosts in list(res['tags'].items()):
                     for host in hosts:
-                        print tag + '\t' + host
+                        print(tag + '\t' + host)
         else:
             if format == 'pretty':
                 for tag in res['tags']:
-                    print tag
+                    print(tag)
             elif format == 'raw':
-                print simplejson.dumps(res)
+                print(simplejson.dumps(res))
             else:
                 for tag in res['tags']:
-                    print tag
+                    print(tag)
 
     def _detach(self, args):
         self.dog.timeout = args.timeout
@@ -99,4 +99,4 @@
         report_warnings(res)
         report_errors(res)
         if format == 'raw':
-            print simplejson.dumps(res)
+            print(simplejson.dumps(res))
RefactoringTool: Files that need to be modified:
RefactoringTool: src/dogapi/common.py
RefactoringTool: src/dogapi/http/base.py
RefactoringTool: src/dogapi/http/dashes.py
RefactoringTool: src/dogapi/http/metrics.py
RefactoringTool: src/dogapi/stats/dog_stats_api.py
RefactoringTool: src/dogapi/stats/metrics.py
RefactoringTool: src/dogapi/stats/reporters.py
RefactoringTool: src/dogshell/comment.py
RefactoringTool: src/dogshell/common.py
RefactoringTool: src/dogshell/dashboard.py
RefactoringTool: src/dogshell/event.py
RefactoringTool: src/dogshell/search.py
RefactoringTool: src/dogshell/tag.py
